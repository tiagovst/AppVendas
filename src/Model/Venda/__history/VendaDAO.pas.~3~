unit VendaDAO;

interface

uses
  Venda,
  VendaDAOInterface,
  FireDAC.Comp.Client,
  System.SysUtils,
  Conexao;

type
  TVendaDAO = class(TInterfacedObject, IVendaDAO)
    //campo de atributos
    SQLQuery : TFDQuery;

    private
    //funcoes de persistencia
    function gerarID: Integer;
    function Inserir(Venda: TVenda; out erro: String): Boolean;
    function Excluir(ID: Integer; out erro: String): Boolean;

    procedure PesquisarData(Data : TDate);
    procedure Pesquisar();
    procedure PesquisarVendedor(ID : Integer);
  end;


var
  uVendaDao : TVendaDAO;

implementation

{ TVendaDAO }

function TVendaDAO.Excluir(ID: Integer; out erro: String): Boolean;
begin
  SQLQuery := TFDQuery.Create(nil);
  with SQLQuery do
  begin
    try
      Connection := dmConexao.FDConnection;
      SQL.Text := 'DELETE FROM VENDA WHERE (ID = :ID)';
      Params.ParamByName('ID').AsInteger := ID;
    finally
      FreeAndNil(SQLQuery);
    end;
  end;
end;

function TVendaDAO.gerarID: Integer;
begin
  SQLQuery := TFDQuery.Create(nil);
  with SQLQuery do
  begin
    try
      Connection := dmConexao.FDConnection;
      SQL.Text := 'SELECT COALESCE(max(id), 0) + 1 AS NEXT_ID FROM VENDA';
      Open();
      Result := FieldByName('NEXT_ID').AsInteger;
    finally
      FreeAndNil(SQLQuery);
    end;
  end;
end;

function TVendaDAO.Inserir(Venda: TVenda; out erro: String): Boolean;
begin
  SQLQuery := TFDQuery.Create(nil);
  with SQLQuery, Venda do
  begin
    try
      Connection := dmConexao.FDConnection;
      SQL.Text := 'insert into VENDA (ID, DATA_VENDA, TOTAL_PRODUTOS, TOTAL_PRECO, VENDEDOR) ' +
      'values (:ID, :DATA_VENDA, :TOTAL_PRODUTOS, :TOTAL_PRECO, :VENDEDOR)';

      Params.ParamByName('ID').AsInteger := ID;
      Params.ParamByName('DATA_VENDA').AsDate := dataVenda;
      Params.ParamByName('VENDEDOR').AsInteger := vendedor;
      Params.ParamByName('TOTAL_PRODUTOS').AsInteger := totalProdutos;
      Params.ParamByName('TOTAL_PRECO').AsFloat := totalPreco;
      
      ExecSQL;
      Result := True;

    except on E: Exception do
    begin
      Erro := 'Ocorreu um erro ao tentar persistir: ' + sLineBreak + E.Message;
      Result := False;
    end;
    end;
    FreeAndNil(SQLQuery);
    FreeAndNil(Venda);
  end;
end;

procedure TVendaDAO.Pesquisar;
begin
  SQLQuery := TFDQuery.Create(nil);
  with SQLQuery do
  begin
    try
      Connection := dmConexao.FDConnection;
      SQL.Text := 'SELECT * FROM VENDA';
      Open();
      First;
    finally
      FreeAndNil(SQLQuery);
    end;
  end;
end;

//procedure TVendaDAO.PesquisarData(Data: TDate);
//begin
//  SQLQuery := TFDQuery.Create(nil);
//  with SQLQuery do
//  begin
//    try
//      Connection := dmConexao.FDConnection;
//      SQL.Text := 'SELECT * FROM VENDA WHERE DATA_VENDA LIKE :DATA_VENDA';
//      Params.ParamByName('DATA_VENDA').AsDate := Data;
//      Open();
//      First;
//    finally
//      FreeAndNil(SQLQuery);
//    end;
//  end;
//end;

procedure TVendaDAO.PesquisarVendedor(ID: Integer);
begin
  SQLQuery := TFDQuery.Create(nil);
  with SQLQuery do
  begin
    try
      Connection := dmConexao.FDConnection;
      SQL.Text := 'SELECT * FROM VENDA WHERE VENDEDOR LIKE :ID';
      Params.ParamByName('ID').AsInteger := ID;
      Open();
      First;
    finally
      FreeAndNil(SQLQuery);
    end;
  end;
end;

end.
